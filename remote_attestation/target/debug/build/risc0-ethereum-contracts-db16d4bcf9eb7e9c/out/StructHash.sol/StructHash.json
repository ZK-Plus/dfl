{"abi":[],"bytecode":{"object":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209e260c1418de8a20bf269c7e123a51f6db98a3786093ce45afc30df9014168d564736f6c63430008190033","sourceMap":"1504:1657:57:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1504:1657:57;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209e260c1418de8a20bf269c7e123a51f6db98a3786093ce45afc30df9014168d564736f6c63430008190033","sourceMap":"1504:1657:57:-:0;;;;;;;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"StructHash implements hashing for structs, incorporating type tags for domain separation. The goals of this library are: * Collision resistance: it should not be possible to find two semantically distinct values that   produce the same digest. * Simplicity: implementations should be simple to understand and write, as these methods must   be implemented in multiple languages and environments, including zkSNARK circuits. * Incremental openings: it should be possible to incrementally open a nested struct without   needing to open (very many) extra fields (i.e. the struct should be \\\"Merkle-ized\\\").\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Structural hashing routines used for RISC Zero data structures.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/StructHash.sol\":\"StructHash\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=/Users/johann/.cargo/git/checkouts/risc0-ethereum-998b5f97ae0f99d6/5fbbc7c/lib/openzeppelin-contracts/contracts/\",\":ds-test/=/Users/johann/.cargo/git/checkouts/risc0-ethereum-998b5f97ae0f99d6/5fbbc7c/lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=/Users/johann/.cargo/git/checkouts/risc0-ethereum-998b5f97ae0f99d6/5fbbc7c/lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=../lib/forge-std/src/\",\":openzeppelin-contracts/=/Users/johann/.cargo/git/checkouts/risc0-ethereum-998b5f97ae0f99d6/5fbbc7c/lib/openzeppelin-contracts/contracts/\",\":openzeppelin/=../lib/openzeppelin-contracts/\"]},\"sources\":{\"../lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4aed79c0fa6f0546ed02f2f683e8f77f0fd2ed7eb34d8bbf3d373c9a6d95b13c\",\"dweb:/ipfs/QmWqVz6UAVqmnWU5pqYPt1o6iDEZyPaBraAA3rKfTTSfYj\"]},\"src/StructHash.sol\":{\"keccak256\":\"0x11d3406ef2b0e323ea9b9f9ecd971a0d84e269748300b22dc8f531c7dd51fcd0\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://a42e88934a979ac3896bf9316320769c4a1daa4c87bc81ed89dfedcb313b5db0\",\"dweb:/ipfs/QmcHhFiH5HQk36RRiLkz9C4Hu6TVLNEGSXmGDgFiJSULtp\"]},\"src/Util.sol\":{\"keccak256\":\"0x230a9a58bb2b0c68d4921ecc3672783f941890a2fa3a238dbe5188cfb7658b82\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://586cb5296c564761609ca8aaae5b1fbbdb19ab1e174f7197f602572d9e82b70c\",\"dweb:/ipfs/QmWxDmucSfg3Wgdk1rVcheDHwkziTsXWvKpKSCnxtpQBqg\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.25+commit.b61c2a91"},"language":"Solidity","output":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=/Users/johann/.cargo/git/checkouts/risc0-ethereum-998b5f97ae0f99d6/5fbbc7c/lib/openzeppelin-contracts/contracts/","ds-test/=/Users/johann/.cargo/git/checkouts/risc0-ethereum-998b5f97ae0f99d6/5fbbc7c/lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/","erc4626-tests/=/Users/johann/.cargo/git/checkouts/risc0-ethereum-998b5f97ae0f99d6/5fbbc7c/lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=../lib/forge-std/src/","openzeppelin-contracts/=/Users/johann/.cargo/git/checkouts/risc0-ethereum-998b5f97ae0f99d6/5fbbc7c/lib/openzeppelin-contracts/contracts/","openzeppelin/=../lib/openzeppelin-contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/StructHash.sol":"StructHash"},"evmVersion":"paris","libraries":{}},"sources":{"../lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe","urls":["bzz-raw://4aed79c0fa6f0546ed02f2f683e8f77f0fd2ed7eb34d8bbf3d373c9a6d95b13c","dweb:/ipfs/QmWqVz6UAVqmnWU5pqYPt1o6iDEZyPaBraAA3rKfTTSfYj"],"license":"MIT"},"src/StructHash.sol":{"keccak256":"0x11d3406ef2b0e323ea9b9f9ecd971a0d84e269748300b22dc8f531c7dd51fcd0","urls":["bzz-raw://a42e88934a979ac3896bf9316320769c4a1daa4c87bc81ed89dfedcb313b5db0","dweb:/ipfs/QmcHhFiH5HQk36RRiLkz9C4Hu6TVLNEGSXmGDgFiJSULtp"],"license":"Apache-2.0"},"src/Util.sol":{"keccak256":"0x230a9a58bb2b0c68d4921ecc3672783f941890a2fa3a238dbe5188cfb7658b82","urls":["bzz-raw://586cb5296c564761609ca8aaae5b1fbbdb19ab1e174f7197f602572d9e82b70c","dweb:/ipfs/QmWxDmucSfg3Wgdk1rVcheDHwkziTsXWvKpKSCnxtpQBqg"],"license":"Apache-2.0"}},"version":1},"id":57}